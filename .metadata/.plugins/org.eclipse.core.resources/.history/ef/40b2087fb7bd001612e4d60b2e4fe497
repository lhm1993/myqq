/**
 * function:登录界面
 * 点击登录按钮以后，才会建立Socket连接，然后向服务器发送登录请求
 * 可以记住账号密码
 */
package com.qq.client.view;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;

import javax.swing.*;

import com.qq.client.model.*;
import com.qq.common.*;
import com.qq.tools.*;

public class QqClientLogin extends JFrame implements ActionListener,Runnable{

		//定义组件
		//用户名，密码 ，图片,密码，密码保护，忘记密码
		JLabel jlb_image,jlb_username,jlb_password,jlb_forget,jlb_email_bg;
		//在不同页签中添加不同的panel
		JPanel jp_top,jp_login,jp_bottom;
		//用户名&密码框
		//JTextField jtf;
		JComboBox<String> jcbb;
		JPasswordField jpf;
		//自动登录&记住密码&隐身登录
		JCheckBox jcb_auto,jcb_remember,jcb_slide;
		//重置，登录，取消登录，注册
		JButton jb_reset,jb_login,jb_register;
		
		Message m ;
		User user;
		
		HashMap userCode;
		public static void main(String[] args) {
			// TODO Auto-generated method stub
			QqClientLogin qqClientLogin=new QqClientLogin();

		}
		//构造函数
		public QqClientLogin(){
			//创建组件
				//label
			jlb_image=new JLabel(new ImageIcon("./images/labelimage.jpg"));
			
			jlb_username=new JLabel("用户名:",JLabel.CENTER);
			jlb_password=new JLabel("密     码:",JLabel.CENTER);
			jlb_forget=new JLabel("忘记密码",JLabel.CENTER);
			jlb_forget.setForeground(Color.RED);//设置字体颜色
			jlb_forget.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));//设置鼠标hover时候的形状
			
			jpf=new JPasswordField(10);
			//初始化登录界面的账号密码框
			//如果读取保存账号密码文件.//client//CodeRember.txt中有记录，就显示到下拉框中
			CodeRemeberManager crm=new CodeRemeberManager();
			jcbb=new JComboBox<String>();
			jcbb.setEditable(true);
			if(crm.readUser_Code()){
				userCode=crm.getUser_code();
				Iterator it=userCode.keySet().iterator();
				while(it.hasNext()){
					String s=(String)it.next();
					jcbb.addItem(s);
					if(!it.hasNext()){
						//将信息显示为最后一次登陆的信息
						jcbb.getEditor().setItem(s);
						jcb_remember=new JCheckBox("记住密码");
						jcb_remember.setSelected(true);
						jpf.setText("●●●●●●●●●●");
					}
				}
			}else{
				jcb_remember=new JCheckBox("记住密码");
				jcbb.getEditor().setItem("");
			}
			//checkbox
			jcb_auto=new JCheckBox("自动登录");

			jcb_slide=new JCheckBox("隐身登录");
			//button
			jb_reset=new JButton("重新输入");
			jb_reset.addActionListener(this);
			jb_login=new JButton("登          录");
			jb_login.addActionListener(this);
			jb_register=new JButton("注          册");
			
			//添加组件设置面板布局
			//上
			jp_top=new JPanel();
			jp_top.add(jlb_image);
			//中
			jp_login=new JPanel();
			jp_login.setLayout(null);
			jlb_username.setBounds(50,40,80,25);
			jcbb.setBounds(130,40,120,25);
			jb_reset.setBounds(270,40,90,25);
			
			jlb_password.setBounds(65,80,50,25);
			jpf.setBounds(130,80,120,25);
			jlb_forget.setBounds(270,80,80,25);
			
			jcb_auto.setBounds(60,130,80,25);
			jcb_remember.setBounds(150,130,80,25);
			jcb_slide.setBounds(240,130,80,25);
			
			
			jp_login.add(jlb_username);
			jp_login.add(jcbb);
			jp_login.add(jb_reset);
			jp_login.add(jlb_password);
			
			jp_login.add(jpf);
			//jp_login.add(jlb_protect);
			jp_login.add(jcb_auto);
			jp_login.add(jcb_remember);
			jp_login.add(jcb_slide);
			jp_login.add(jlb_forget);
			//下
			jp_bottom=new JPanel();
			jp_bottom.setLayout(null);
			jb_login.setBounds(60,10,100,30);
			jb_register.setBounds(220,10,100,30);
			jp_bottom.add(jb_login);
			jp_bottom.add(jb_register);
			
			//向窗口添加组件，设置窗口布局
			this.setLayout(null);
			jp_top.setBounds(0,0,400,60);
			jp_login.setBounds(0,60,400,170);
			jp_bottom.setBounds(0,220,400,50);
			this.add(jp_top);
			this.add(jp_login);
			this.add(jp_bottom);
			
			//设置窗口属性
			this.setSize(400,300);
			this.setTitle("QQ登录界面");
			Image image=Toolkit.getDefaultToolkit().getImage("./images/qq.jpg");
			this.setIconImage(image);
			this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			this.setLocationRelativeTo(null);
			this.setResizable(false);
			this.setVisible(true);	
			
		}
		
		//将要发送的信息写入到Message m中
		public void writeMessage(){
			m=new Message();
			user=new User();
			user.setUserId(jcbb.getEditor().getItem()+"");
			//如果是保存了密码的账号，密码从文件中读取
			if(userCode!=null){
				String p=(String)userCode.get(user.getUserId());
				if(p!=null){
					m.setPasswd(p);
				}else{
					m.setPasswd(new String(jpf.getPassword()));
				}
			}else{
				m.setPasswd(new String(jpf.getPassword()));
			}
			m.setSender(jcbb.getEditor().getItem()+"");
			//System.out.println("jcbb.getEditor().getItem()="+jcbb.getEditor().getItem()+"****");
			m.setGetter("s_1");
			m.setUser(user);
			//将这个Message m 信息包设置登录包
			m.setMesType(1);
			//System.out.println("*****m.getSender()="+m.getSender()+" m.getGetter()="+m.getGetter()+" user.getUserId()="+user.getUserId()+" m.getPasswd()="+m.getPasswd());
		}
		
		@Override
		public void actionPerformed(ActionEvent arg0) {
			// TODO Auto-generated method stub
			//1 登录
			if(arg0.getSource()==jb_login){
				//验证登录信息
				this.writeMessage();
				LoginServer ls=new LoginServer(m);
				if(ls.isLogin()){
					//登录成功以后，如果保存密码了，就将该密码写到文件里面
					if(jcb_remember.isSelected()){
						CodeRemeberManager crm=new CodeRemeberManager();
						crm.writeUser_Code(m.getSender()+" "+m.getPasswd());
					}else{
						CodeRemeberManager crm=new CodeRemeberManager();
						crm.removeOneUser_Code(m.getSender());
					}
					this.dispose();
					//将建立的连接写入Message m包中
					new QqList(ls.getM(), ls.getS());
					//System.out.println(ls.getS());

				}else if(ls.isConnect()==true){
					JOptionPane.showMessageDialog(null, "账号或密码错误！");
				}else if(ls.isAlreadyOnline()==true){
					JOptionPane.showMessageDialog(null, "改账户已在线,不能重复登录");
				}else{
					JOptionPane.showMessageDialog(null, "服务器链接异常！");
				}
			}
			//2 清空当前输入
			if(arg0.getSource()==jb_reset){
				
				jcbb.getEditor().setItem("");
				jpf.setText("");
			}
		}
		@Override
		public void run() {
			// TODO Auto-generated method stub
			
		}

}
